name: Build Add-on ZIP

on:
  push:
    branches:
      - main
    paths:
      - blender_manifest.toml
      - __init__.py
      - ps1d/**
      - icons/**
      - README.md
      - LICENSE
      - .github/workflows/build.yml
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    container: linuxserver/blender:4.5.2
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Blender version
        run: blender --version

      - name: Package with Blender CLI
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p dist
          # Build via Blenderâ€™s extensions CLI (requires Blender 4.2+)
          blender --command extension build --output-dir dist --source-dir .

      - name: Normalize names and expose outputs
        id: build
        shell: bash
        run: |
          set -euo pipefail
          addon_id=$(sed -nE 's/^\s*id\s*=\s*"([^"]+)".*/\1/p' blender_manifest.toml | head -n1)
          version=$(sed -nE 's/^\s*version\s*=\s*"([^"]+)".*/\1/p' blender_manifest.toml | head -n1)
          src_zip=$(ls -1 dist/*.zip | head -n1)
          versioned_zip="dist/${addon_id}-${version}.zip"
          stable_zip="dist/${addon_id}.zip"
          if [ "$src_zip" != "$versioned_zip" ]; then
            cp -f "$src_zip" "$versioned_zip"
          fi
          if [ "$src_zip" != "$stable_zip" ]; then
            cp -f "$src_zip" "$stable_zip"
          fi
          echo "addon_id=$addon_id" >> "$GITHUB_OUTPUT"
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "versioned_zip=$versioned_zip" >> "$GITHUB_OUTPUT"
          echo "stable_zip=$stable_zip" >> "$GITHUB_OUTPUT"

      - name: Install unzip
        shell: bash
        run: |
          set -euo pipefail
          if command -v unzip >/dev/null 2>&1; then
            echo "unzip already installed"
            exit 0
          fi
          if command -v apt-get >/dev/null 2>&1; then
            apt-get update && apt-get install -y unzip
          elif command -v apk >/dev/null 2>&1; then
            apk add --no-cache unzip
          elif command -v dnf >/dev/null 2>&1; then
            dnf install -y unzip
          elif command -v yum >/dev/null 2>&1; then
            yum install -y unzip
          else
            echo "No supported package manager found to install unzip" >&2
            exit 1
          fi

      - name: Show ZIP contents
        shell: bash
        run: unzip -l dist/*.zip || true

      - name: Upload artifact (versioned)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.addon_id }}-${{ steps.build.outputs.version }}
          path: ${{ steps.build.outputs.versioned_zip }}
          if-no-files-found: error
          compression-level: 0

      - name: Create/Update "latest" release and upload stable asset
        uses: ncipollo/release-action@v1
        with:
          tag: latest
          name: Latest (auto)
          allowUpdates: true
          makeLatest: true
          prerelease: true
          replacesArtifacts: true
          artifacts: ${{ steps.build.outputs.stable_zip }}
          artifactContentType: application/zip
          body: |
            Automated build from ${{ github.sha }}.
            Add-on ID: ${{ steps.build.outputs.addon_id }} | Version: ${{ steps.build.outputs.version }}
